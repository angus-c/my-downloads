#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var pkginfo = require( 'pkginfo' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var opts = require( './opts.json' );
var counts = require( './../lib' );


// VARIABLES //

var delimiter;
var args;
var pkg;
var fmt;


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE INFO //

pkg = pkginfo.read( require.main );
process.title = pkg.package.name;


// PACKAGE UPDATES //

notifier( { 'pkg': pkg.package } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

function onClose() {
	process.exit( 0 );
}

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.package.version );
	return;
}


// OPTIONS //

opts = {};

opts.packages = args._;
if ( args.period ) {
	opts.period = args.period;
}
if (
	args.format &&
	args.format !== 'csv' &&
	args.format !== 'json'
) {
	throw new Error( 'invalid option. Format option must be either `csv` or `json`. Option: `' + args.format + '`.' );
}
fmt = args.format || 'csv';
delimiter = args.delimiter || ',';


// COUNTS //

counts( opts, clbk );

/**
* FUNCTION: clbk( error, results )
*	Callback invoked upon receiving results.
*
* @private
* @param {Error|Null} error - error object or null
* @param {Object[]} results - results
* @returns {Void}
*/
function clbk( error, results ) {
	var writer;
	if ( error ) {
		throw error;
	}
	if ( fmt === 'json' ) {
		writer = ndjson;
	} else {
		writer = csv;
	}
	writer( process.stdout, results );
	process.exit( 0 );
} // end FUNCTION clbk()

/**
* FUNCTION: csv( stream, data )
*	Writes newline-delimited column-separated values to a writable stream.
*
* @private
* @param {Stream} stream - writable stream
* @param {Object[]} data - data to write
* @returns {Void}
*/
function csv( stream, data ) {
	var headers;
	var row;
	var str;
	var idx;
	var N;
	var M;
	var i;
	var j;

	// Number of packages:
	M = data.length;

	// Write CSV headers...
	headers = new Array( M+1 );
	headers[ 0 ] = 'time';
	for ( i = 0; i < M; i++ ) {
		headers[ i+1 ] = data[ i ].package;
	}
	str = headers.join( delimiter ) + '\n';
	stream.write( str, 'utf8' );

	// Find a package having counts to determine the number of time values...
	for ( i = 0; i < M; i++ ) {
		if ( data[ i ].data !== null ) {
			N = data[ i ].data.length;
			idx = i;
			break;
		}
	}
	// Check that such a package exists...
	if ( idx === void 0 ) {
		process.stderr.write( 'Error: the specified packages cannot be written as CSV as they do not have any\ndownload counts.\n' );
		process.exit( 1 );
		return;
	}
	row = new Array( M+1 ); // reusable cache

	// Write CSV values...
	for ( j = 0; j < N; j++ ) {
		// Get a time value:
		row[ 0 ] = data[ idx ].data[ j ][ 0 ];

		// Get the counts for all packages on the current date...
		for ( i = 0; i < M; i++ ) {
			if ( data[ i ].data === null ) {
				// "null" fill packages without any counts:
				row[ i+1 ] = 'null';
			} else {
				row[ i+1 ] = data[ i ].data[ j ][ 1 ];
			}
		}
		// Write out the row:
		str = row.join( delimiter ) + '\n';
		stream.write( str, 'utf8' );
	}
} // end FUNCTION csv()

/**
* FUNCTION: ndjson( stream, data )
*	Writes newline-delimited JSON to a writable stream.
*
* @private
* @param {Stream} stream - writable stream
* @param {Object[]} data - data to write
* @returns {Void}
*/
function ndjson( stream, data ) {
	var out;
	var d;
	var i;
	for ( i = 0; i < data.length; i++ ) {
		d = data[ i ];
		out = {};
		out[ d.package ] = d.data;
		out = JSON.stringify( out ) + '\n';
		stream.write( out, 'utf8' );
	}
} // end FUNCTION ndjson()
